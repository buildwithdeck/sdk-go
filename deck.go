// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkgo

// Generated from OpenAPI doc version v1 and generator version 2.694.1

import (
	"context"
	"fmt"
	"github.com/buildwithdeck/sdk-go/internal/config"
	"github.com/buildwithdeck/sdk-go/internal/hooks"
	"github.com/buildwithdeck/sdk-go/internal/utils"
	"github.com/buildwithdeck/sdk-go/models/components"
	"github.com/buildwithdeck/sdk-go/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Deck Sandbox API
	"https://sandbox.deck.co/api/v1",
	// Deck API
	"https://live.deck.co/api/v1",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// Deck API: # Deck API makes it straightforward for users to connect to any portal securely and quickly.
//
// ### Welcome! Looking for a quick introduction to our API? Check out the ðŸš€[Quickstart guide](https://framework.docs.deck.co/docs/setup).
//
// Starting on the sandbox server is easy:
//
// 1. Create an account using the [dashboard](https://dashboard.deck.co) to get your client id and sandbox secret
// 2. Enter your client id and sandbox secret in the Authentication section below
// 3. Hit the "Try" buttons below for each endpoint.
//
// Happy querying!
type Deck struct {
	SDKVersion string
	// Endpoints related to jobs.
	Jobs          *Jobs
	JobsDocuments *JobsDocuments
	// These endpoints are used by the Link widget. They can also be used for creating your own UX experience and connecting data from utility data sources.
	Link  *Link
	Links *Links
	// Manage connections
	Connection  *Connection
	Connections *Connections
	// Agent management
	Agents *Agents
	Test   *Test
	// Webhook subscriptions for the team. Use this to subscribe to and unsubscribe from webhook events. See the documentation for more information on how to use this API.
	WebhookSubscription *WebhookSubscription

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*Deck)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Deck) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Deck) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *Deck) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Deck) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security components.Security) SDKOption {
	return func(sdk *Deck) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *Deck) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Deck) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Deck) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Deck {
	sdk := &Deck{
		SDKVersion: "0.3.0",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 0.3.0 2.694.1 v1 github.com/buildwithdeck/sdk-go",
			ServerList: ServerList,
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	sdk.sdkConfiguration = sdk.hooks.SDKInit(sdk.sdkConfiguration)

	sdk.Jobs = newJobs(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.JobsDocuments = newJobsDocuments(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Link = newLink(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Links = newLinks(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Connection = newConnection(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Connections = newConnections(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Agents = newAgents(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Test = newTest(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.WebhookSubscription = newWebhookSubscription(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
