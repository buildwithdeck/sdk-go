// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ErrorCodeEnum string

const (
	ErrorCodeEnumDataSourceNotFound         ErrorCodeEnum = "DATA_SOURCE_NOT_FOUND"
	ErrorCodeEnumDataSourceNotResponding    ErrorCodeEnum = "DATA_SOURCE_NOT_RESPONDING"
	ErrorCodeEnumProductNotReady            ErrorCodeEnum = "PRODUCT_NOT_READY"
	ErrorCodeEnumConnectionNotFound         ErrorCodeEnum = "CONNECTION_NOT_FOUND"
	ErrorCodeEnumConnectionFailed           ErrorCodeEnum = "CONNECTION_FAILED"
	ErrorCodeEnumInvalidCredentials         ErrorCodeEnum = "INVALID_CREDENTIALS"
	ErrorCodeEnumLiveConnectivityNotEnabled ErrorCodeEnum = "LIVE_CONNECTIVITY_NOT_ENABLED"
	ErrorCodeEnumProductNotEnabled          ErrorCodeEnum = "PRODUCT_NOT_ENABLED"
	ErrorCodeEnumNoAccounts                 ErrorCodeEnum = "NO_ACCOUNTS"
	ErrorCodeEnumNoStatements               ErrorCodeEnum = "NO_STATEMENTS"
	ErrorCodeEnumConnectionLocked           ErrorCodeEnum = "CONNECTION_LOCKED"
	ErrorCodeEnumBlockedByPin               ErrorCodeEnum = "BLOCKED_BY_PIN"
	ErrorCodeEnumValidationFailed           ErrorCodeEnum = "VALIDATION_FAILED"
	ErrorCodeEnumInvalidAPIKeys             ErrorCodeEnum = "INVALID_API_KEYS"
	ErrorCodeEnumInvalidLinkToken           ErrorCodeEnum = "INVALID_LINK_TOKEN"
	ErrorCodeEnumInvalidPublicToken         ErrorCodeEnum = "INVALID_PUBLIC_TOKEN"
	ErrorCodeEnumInvalidAccessToken         ErrorCodeEnum = "INVALID_ACCESS_TOKEN"
	ErrorCodeEnumInvalidAccountID           ErrorCodeEnum = "INVALID_ACCOUNT_ID"
	ErrorCodeEnumInvalidStatementID         ErrorCodeEnum = "INVALID_STATEMENT_ID"
	ErrorCodeEnumConsentRequired            ErrorCodeEnum = "CONSENT_REQUIRED"
	ErrorCodeEnumInvalidCurp                ErrorCodeEnum = "INVALID_CURP"
	ErrorCodeEnumInvalidDocumentUpload      ErrorCodeEnum = "INVALID_DOCUMENT_UPLOAD"
	ErrorCodeEnumInvalidArgument            ErrorCodeEnum = "INVALID_ARGUMENT"
	ErrorCodeEnumNotSupported               ErrorCodeEnum = "NOT_SUPPORTED"
	ErrorCodeEnumUnexpectedError            ErrorCodeEnum = "UNEXPECTED_ERROR"
	ErrorCodeEnumPlannedMaintenance         ErrorCodeEnum = "PLANNED_MAINTENANCE"
	ErrorCodeEnumSecurityQuestionNotFound   ErrorCodeEnum = "SECURITY_QUESTION_NOT_FOUND"
	ErrorCodeEnumSecurityCaptchaNotFound    ErrorCodeEnum = "SECURITY_CAPTCHA_NOT_FOUND"
	ErrorCodeEnumRateLimitExceeded          ErrorCodeEnum = "RATE_LIMIT_EXCEEDED"
	ErrorCodeEnumNoActiveConnection         ErrorCodeEnum = "NO_ACTIVE_CONNECTION"
	ErrorCodeEnumInvalidSource              ErrorCodeEnum = "INVALID_SOURCE"
	ErrorCodeEnumActiveConnectionExists     ErrorCodeEnum = "ACTIVE_CONNECTION_EXISTS"
)

func (e ErrorCodeEnum) ToPointer() *ErrorCodeEnum {
	return &e
}
func (e *ErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATA_SOURCE_NOT_FOUND":
		fallthrough
	case "DATA_SOURCE_NOT_RESPONDING":
		fallthrough
	case "PRODUCT_NOT_READY":
		fallthrough
	case "CONNECTION_NOT_FOUND":
		fallthrough
	case "CONNECTION_FAILED":
		fallthrough
	case "INVALID_CREDENTIALS":
		fallthrough
	case "LIVE_CONNECTIVITY_NOT_ENABLED":
		fallthrough
	case "PRODUCT_NOT_ENABLED":
		fallthrough
	case "NO_ACCOUNTS":
		fallthrough
	case "NO_STATEMENTS":
		fallthrough
	case "CONNECTION_LOCKED":
		fallthrough
	case "BLOCKED_BY_PIN":
		fallthrough
	case "VALIDATION_FAILED":
		fallthrough
	case "INVALID_API_KEYS":
		fallthrough
	case "INVALID_LINK_TOKEN":
		fallthrough
	case "INVALID_PUBLIC_TOKEN":
		fallthrough
	case "INVALID_ACCESS_TOKEN":
		fallthrough
	case "INVALID_ACCOUNT_ID":
		fallthrough
	case "INVALID_STATEMENT_ID":
		fallthrough
	case "CONSENT_REQUIRED":
		fallthrough
	case "INVALID_CURP":
		fallthrough
	case "INVALID_DOCUMENT_UPLOAD":
		fallthrough
	case "INVALID_ARGUMENT":
		fallthrough
	case "NOT_SUPPORTED":
		fallthrough
	case "UNEXPECTED_ERROR":
		fallthrough
	case "PLANNED_MAINTENANCE":
		fallthrough
	case "SECURITY_QUESTION_NOT_FOUND":
		fallthrough
	case "SECURITY_CAPTCHA_NOT_FOUND":
		fallthrough
	case "RATE_LIMIT_EXCEEDED":
		fallthrough
	case "NO_ACTIVE_CONNECTION":
		fallthrough
	case "INVALID_SOURCE":
		fallthrough
	case "ACTIVE_CONNECTION_EXISTS":
		*e = ErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorCodeEnum: %v", v)
	}
}
