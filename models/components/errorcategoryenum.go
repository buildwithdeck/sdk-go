// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ErrorCategoryEnum string

const (
	ErrorCategoryEnumInvalidRequest      ErrorCategoryEnum = "INVALID_REQUEST"
	ErrorCategoryEnumInvalidResult       ErrorCategoryEnum = "INVALID_RESULT"
	ErrorCategoryEnumInvalidInput        ErrorCategoryEnum = "INVALID_INPUT"
	ErrorCategoryEnumDataSourceError     ErrorCategoryEnum = "DATA_SOURCE_ERROR"
	ErrorCategoryEnumRateLimitExceeded   ErrorCategoryEnum = "RATE_LIMIT_EXCEEDED"
	ErrorCategoryEnumAPIError            ErrorCategoryEnum = "API_ERROR"
	ErrorCategoryEnumConnectionError     ErrorCategoryEnum = "CONNECTION_ERROR"
	ErrorCategoryEnumRecaptchaError      ErrorCategoryEnum = "RECAPTCHA_ERROR"
	ErrorCategoryEnumFetchBalance        ErrorCategoryEnum = "FETCH_BALANCE"
	ErrorCategoryEnumAddPaymentMethod    ErrorCategoryEnum = "ADD_PAYMENT_METHOD"
	ErrorCategoryEnumFetchPaymentMethods ErrorCategoryEnum = "FETCH_PAYMENT_METHODS"
	ErrorCategoryEnumPayment             ErrorCategoryEnum = "PAYMENT"
)

func (e ErrorCategoryEnum) ToPointer() *ErrorCategoryEnum {
	return &e
}
func (e *ErrorCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INVALID_REQUEST":
		fallthrough
	case "INVALID_RESULT":
		fallthrough
	case "INVALID_INPUT":
		fallthrough
	case "DATA_SOURCE_ERROR":
		fallthrough
	case "RATE_LIMIT_EXCEEDED":
		fallthrough
	case "API_ERROR":
		fallthrough
	case "CONNECTION_ERROR":
		fallthrough
	case "RECAPTCHA_ERROR":
		fallthrough
	case "FETCH_BALANCE":
		fallthrough
	case "ADD_PAYMENT_METHOD":
		fallthrough
	case "FETCH_PAYMENT_METHODS":
		fallthrough
	case "PAYMENT":
		*e = ErrorCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorCategoryEnum: %v", v)
	}
}
